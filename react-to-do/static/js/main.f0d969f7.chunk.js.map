{"version":3,"sources":["components/Button.js","contexts/ModalContext.js","components/Alert.js","components/Clock.js","components/Header.js","components/Form.js","components/Input/InputCheckbox.js","contexts/ListItemContext.js","components/List/ListItem.js","components/List/List.js","App.js","serviceWorker.js","index.js"],"names":["ElButton","props","blockName","onMouseDown","this","className","classes","text","React","Component","ModalContext","createContext","Alert","bind","data","title","modalOpened","join","context","closeModal","contextType","Clock","state","date","Date","toLocaleTimeString","timerID","setInterval","startTimer","clearInterval","setState","Header","classTitle","display","textAlign","style","Form","onChange","submitHandler","value","onSubmit","type","e","preventDefault","length","newItemData","id","now","toString","completed","addItem","openModal","target","InputCheckbox","checked","changeStatus","ListItemContext","ListItem","defaultClassesByItem","getClassesByItem","getStatus","getIndex","getTitle","removeItem","getID","status","changeStatusItem","index","item","List","items","map","key","App","curModal","Provider","concat","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f0d969f7.chunk.js","sourcesContent":["import React from \"react\";\n\nclass ElButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.blockName = \"button\";\n  }\n  render() {\n    return (\n      <button\n        onMouseDown={ this.props.onMouseDown }\n        className={ `${this.blockName} ${this.props.classes}` }\n      >\n        { this.props.text }\n      </button>\n    );\n  }\n}\n\nexport default ElButton\n","import React from \"react\";\n\nconst ModalContext = React.createContext(() => {});\n\nexport { ModalContext }\n","import React from \"react\";\n\nimport ElButton from \"./Button\";\n\nimport { ModalContext } from \"../contexts/ModalContext\";\n\nclass Alert extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onMouseDown = this.onMouseDown.bind(this);\n  }\n  render() {\n    return (\n      <div className={ this.classes() }>\n        <div className=\"alert__content\">\n          <span className=\"alert__title\">\n            { this.props.data.title }\n          </span>\n\n          <ElButton\n            onMouseDown={ this.onMouseDown }\n            text=\"Close\"\n          />\n        </div>\n      </div>\n    );\n  }\n  classes() {\n    return [\n      \"alert\",\n      this.props.modalOpened ? \"alert_opened\" : \"\",\n    ].join(\" \")\n  }\n  onMouseDown() {\n    this.context.closeModal()\n  }\n}\n\nAlert.contextType = ModalContext;\n\nexport default Alert\n","import React from \"react\";\n\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: new Date(),\n    }\n  }\n  render() {\n    return (\n      <div className=\"clock\">\n        { (new Date()).toLocaleTimeString() }\n      </div>\n    );\n  }\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.startTimer(),\n      1000\n    )\n  }\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n  startTimer() {\n    this.setState({\n      date: new Date(),\n    })\n  }\n}\n\nexport default Clock;","import React from \"react\";\nimport Clock from \"./Clock\";\n\nclass Header extends React.Component {\n  constructor(props) {\n    super(props);\n    this.classTitle = {\n      display: \"block\",\n      textAlign: \"center\",\n    }\n  }\n  render() {\n    return (\n      <header className=\"header\">\n        <div className=\"wrapper\">\n          <div className=\"header__inner\">\n            <span className=\"title header__title\" style={this.classTitle}>\n              React to-do list\n            </span>\n\n            <Clock />\n          </div>\n        </div>\n      </header>\n    );\n  }\n}\n\nexport default Header\n","import React from \"react\";\nimport ElButton from \"./Button\";\nimport { ModalContext } from \"../contexts/ModalContext\";\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onChange = this.onChange.bind(this);\n    this.submitHandler = this.submitHandler.bind(this);\n    this.state = {\n      value: \"\",\n    }\n  }\n  render() {\n    return (\n      <form\n        className=\"form\"\n        onSubmit={ this.submitHandler }\n      >\n        <div className=\"wrapper\">\n          <div className=\"form__inner\">\n            <input\n              value={ this.state.value }\n              onChange={ this.onChange }\n              type=\"text\"\n              className=\"field form__input\"\n            />\n\n            <ElButton\n              classes=\"form__button\"\n              text=\"Create\"\n            />\n          </div>\n        </div>\n      </form>\n    );\n  }\n  submitHandler(e) {\n    e.preventDefault();\n\n    if (!this.state.value.length) {\n      this.context.openModal({\n        title: \"You should input name\",\n      })\n      return;\n    }\n\n    const newItemData = {\n      id: Date.now().toString(),\n      title: this.state.value,\n      completed: false,\n    };\n\n    this.props.addItem(newItemData);\n\n    this.setState({\n      value: \"\",\n    })\n  }\n  onChange({ target }) {\n    this.setState({\n      value: target.value\n    })\n  }\n}\n\nForm.contextType = ModalContext;\n\nexport default Form\n","import React from \"react\";\n\nclass InputCheckbox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onChange = this.onChange.bind(this)\n  }\n  render() {\n    return (\n      <label className=\"field-checkbox\">\n        <input\n          className=\"field-checkbox__input\"\n          type=\"checkbox\"\n          checked={ this.props.checked }\n          onChange={ this.onChange }\n        />\n        <span className=\"field field-checkbox__box\" />\n      </label>\n    );\n  }\n  onChange(e) {\n    this.props.changeStatus(!this.props.checked)\n  }\n}\n\nexport default InputCheckbox\n","import React from \"react\";\n\nconst ListItemContext = React.createContext(() => {});\n\nexport { ListItemContext }\n","import React from \"react\";\nimport ElButton from \"../Button\";\nimport InputCheckbox from \"../Input/InputCheckbox\";\n\nimport { ListItemContext } from \"./../../contexts/ListItemContext\"\n\nclass ListItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onMouseDown = this.onMouseDown.bind(this);\n    this.changeStatus = this.changeStatus.bind(this);\n    this.defaultClassesByItem = [\"list-item\"];\n  }\n  render() {\n    return (\n      <div className={ this.getClassesByItem() }>\n        <InputCheckbox\n          checked={ this.getStatus() }\n          changeStatus={ this.changeStatus }\n        />\n\n        <span className=\"list-item__index\">\n          { this.getIndex() }.\n        </span>\n\n        <span className=\"list-item__text\">\n          { this.getTitle() }\n        </span>\n\n        <ElButton\n          classes=\"list-item__remove button_red\"\n          text=\"Remove\"\n          onMouseDown={ this.onMouseDown }\n        />\n      </div>\n    );\n  }\n  onMouseDown() {\n    this.context.removeItem(this.getID());\n  }\n  changeStatus(status) {\n    this.context.changeStatusItem({ status, id: this.getID() });\n  }\n  getIndex() {\n    return this.props.index;\n  }\n  getTitle() {\n    return this.props.item.title;\n  }\n  getID() {\n    return this.props.item.id;\n  }\n  getStatus() {\n    return this.props.item.completed;\n  }\n  getClassesByItem() {\n    const classes = [\n      this.getStatus() ? \"list-item_completed\" : \"\",\n    ];\n\n    return [...this.defaultClassesByItem, ...classes].join(\" \");\n  }\n}\n\nListItem.contextType = ListItemContext;\n\nexport default ListItem\n","import React from \"react\";\nimport ListItem from \"./ListItem\";\n\nclass List extends React.Component {\n  render() {\n    return (\n      <section className=\"list\">\n        <div className=\"wrapper\">\n          <div className=\"list__inner\">\n            {\n              this.props.items.map((item, index) => (\n                <ListItem\n                  key={ item.id }\n                  item={ item }\n                  index={ index + 1 }\n                />\n              ))\n            }\n          </div>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default List\n","import React from 'react';\nimport Alert from \"./components/Alert\";\nimport AppHeader from './components/Header';\nimport AppForm from './components/Form';\nimport AppList from './components/List/List';\n\nimport { ListItemContext } from \"./contexts/ListItemContext\"\nimport { ModalContext } from \"./contexts/ModalContext\"\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.addItem = this.addItem.bind(this);\n    this.removeItem = this.removeItem.bind(this);\n    this.changeStatusItem = this.changeStatusItem.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.openModal = this.openModal.bind(this);\n    this.state = {\n      items: [],\n      modalOpened: false,\n      curModal: {\n        title: \"\",\n      }\n    }\n  }\n  render() {\n    return (\n      <ModalContext.Provider value={{\n        openModal: this.openModal,\n        closeModal: this.closeModal,\n      }}>\n        <div className=\"app\">\n          <Alert\n            modalOpened={ this.state.modalOpened }\n            data={ this.state.curModal }\n          />\n\n          <AppHeader />\n\n          <AppForm addItem={ this.addItem } />\n\n          <ListItemContext.Provider value={{\n            removeItem: this.removeItem,\n            changeStatusItem: this.changeStatusItem\n          }}>\n            {\n              this.state.items.length\n                ? <AppList items={ this.state.items } />\n                : <p className=\"wrapper\">Not found</p>\n            }\n          </ListItemContext.Provider>\n        </div>\n      </ModalContext.Provider>\n    )\n  }\n  addItem(item) {\n    this.setState((state) => ({\n      items: state.items.concat(item),\n    }))\n  }\n  removeItem(id) {\n    this.setState((state) => ({\n      items: state.items.filter(item => item.id !== id)\n    }))\n  }\n  changeStatusItem({ id, status }) {\n    this.setState((state) => ({\n      items: state.items.map(item => {\n        if (item.id === id) {\n          return {\n            ...item,\n            completed: status\n          };\n        }\n        return item;\n      })\n    }))\n  }\n  openModal(data) {\n    this.setState({\n      modalOpened: true,\n      curModal: { ...data },\n    })\n  }\n  closeModal() {\n    this.setState({\n      modalOpened: false,\n    })\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}